from modulos.departamento import *
from flask import Flask, render_template, request, redirect, url_for, abort, flash
#import csv
from flask_login import login_user, login_required, current_user, logout_user
from werkzeug.security import generate_password_hash, check_password_hash

from functools import wraps
from modulos.config import app, db, login_manager
from modulos.databases import *

admin_list = [1]

with app.app_context():
    db.create_all()

def admin_only(f):
    @wraps(f)
    def decorated_function(*args, **kwargs):
        if current_user.is_authenticated and current_user.id not in admin_list:
            return abort(403)
        return f(*args, **kwargs)
    return decorated_function

def is_admin():
    if current_user.is_authenticated and current_user.id in admin_list:
        return True
    else:
        return False

@login_manager.user_loader
def user_loader(user_id):
    return User.query.get(user_id)
    
@app.route("/", methods=['GET', 'POST'])
def raiz():  
    condicion=""
    if request.method == 'POST':
        n=request.form["nombre"]
        c=request.form["contraseña"]
        usuario = User.query.filter_by(usuario.__user_name==n).first() #dudoso
        if not usuario:
            condicion="No existe una cuenta que corresponda a este nombre"

    return render_template("main.html", condicion=condicion)

@app.route("/sing_up", methods=['GET', 'POST'])
def new_user():
    global datos
    condicion=""
    if request.method == 'POST':
        condicion=""

        name=request.form.get["name"]
        apellido=request.form.get["apellido"]
        mail=request.form.get["email"]
        user_name=request.form.get["nombre_usuario"]
        cloister=request.form.get["cloister"]
        contraseña=request.form.get["contraseña"]
        rep_contraseña=request.form.get["contraseña_rep"]

        mails = User.query.all('self.__email')
        names = User.query.all('self.__user_name')

        if not name or not apellido or not mail or not user_name or not cloister or not contraseña or not rep_contraseña:
            condicion="Faltan ingresar datos. Por favor complete todos los campos"

        elif mail in mails:
            condicion="Este mail ya está asociado a una cuenta existente"

        elif user_name in names:
            condicion="Este nombre de usuario ya esta en uso"
        
        elif contraseña!=rep_contraseña:
            condicion="Las contraseñas ingresadas no coinciden"

        else:
            user=User()
            user.set_nombre(name)
            user.set_apellido(apellido)
            user.set_mail(mail)
            user.set_usuario(user_name)
            user.set_claustro(cloister)
            user.set_contraseña(contraseña)
            db.session.add(user)
            db.session.commit()

            if cloister=="Jefe":
                return redirect(url_for("jefe"))
            else:
                return redirect(url_for("usuario"))
    
    return render_template("sing_up.html", condicion=condicion)

@app.route("/jefe", methods=['GET', 'POST'])
def jefe():
    return render_template("jefe.html")

@app.route("/usuario", methods=['GET', 'POST'])
def usuario():
    return render_template("usuario.html")

@app.route("/reclamo", methods=['GET', 'POST'])
def crear():
    return render_template("reclamo.html")

@app.route("/reclamos_pendientes", methods=['GET', 'POST'])
def pendientes():
    return render_template("reclamos_pendientes.html")

@app.route("/reclamos_usuario", methods=['GET', 'POST'])
def recl():
    return render_template("reclamo_usuario.html")

@app.route("/reclamos_departamento", methods=['GET', 'POST'])
def responder():
    return render_template("reclamo_depto.html")

if __name__ == "__main__":
    app.run(debug=True)