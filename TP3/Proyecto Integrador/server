from flask import Flask, render_template, request, redirect, url_for, abort, flash
from flask_login import login_user, login_required, current_user, logout_user
from werkzeug.security import generate_password_hash, check_password_hash
from modulos.gestores import Gestor_de_base_de_datos, Gestor_de_reclamos
from modulos.usuario import Usuario

from functools import wraps
from modulos.config import app, db, login_manager
from modulos.databases import *

from sqlalchemy.orm.exc import NoResultFound

GestorDB=Gestor_de_base_de_datos()
#GestorR=Gestor_de_reclamos('/modulos/ClasificadorSk/clasificadorsk/objeto_clasificador.pkl') #no encuentra la ruta

admin_list = [1]

with app.app_context():
    db.create_all()

@login_manager.user_loader
def user_loader(user_id):
    return Persona_db.query.get(user_id)
    
@app.route("/", methods=['GET', 'POST'])
def raiz():  
    condicion=""
    if request.method == 'POST':
        n=request.form["nombre"]
        c=request.form["contraseña"]
        usuario = Persona_db.query.filter_by(usuario.__user_name==n).first() #dudoso
        if not usuario:
            condicion="No existe una cuenta que corresponda a este nombre"

    return render_template("main.html", condicion=condicion)

@app.route("/sing_up", methods=['GET', 'POST'])
def new_user():
    condicion=""
    if request.method == 'POST':
        name=request.form.get["name"]
        apellido=request.form.get["apellido"]
        mail=request.form.get["email"]
        user_name=request.form.get["nombre_usuario"]
        cloister=request.form.get["cloister"]
        contraseña=request.form.get["contraseña"]
        rep_contraseña=request.form.get["contraseña_rep"]

        if not name or not apellido or not mail or not user_name or not cloister or not contraseña or not rep_contraseña:
            condicion="Faltan ingresar datos. Por favor complete todos los campos"

        elif GestorDB.chequear_disponibilidad("email", mail)=="Email/usuario ocupado":
            condicion="Ya existe una cuenta con ese email"

        elif GestorDB.chequear_disponibilidad("usuario", user_name)=="Email/usuario ocupado":
            condicion="Ya existe una cuenta con ese nombre de usuario"
        
        elif contraseña!=rep_contraseña:
            condicion="Las contraseñas ingresadas no coinciden"

        else:
            user=Usuario(name, apellido, user_name, mail, contraseña, cloister)
            datos_user=[user.get_ID, user.get_nombre, user.get_apellido, user.get_email, user.get_contraseña, user.get_claustro, adheridos, generados]
            GestorDB.guardar_nuevo_objeto("usuario", datos_user)
    
    return render_template("sing_up.html", condicion=condicion)

@app.route("/jefe", methods=['GET', 'POST'])
def jefe(depto):
    return render_template("jefe.html", depto=depto)

@app.route("/usuario", methods=['GET', 'POST'])
def usuario(user):
    return render_template("usuario.html", user=user)

@app.route("/reclamo", methods=['GET', 'POST'])
def crear():
    return render_template("reclamo.html")

@app.route("/reclamos_pendientes", methods=['GET', 'POST'])
def pendientes():
    return render_template("reclamos_pendientes.html")

@app.route("/reclamos_usuario", methods=['GET', 'POST'])
def recl():
    return render_template("reclamo_usuario.html")

@app.route("/reclamos_departamento", methods=['GET', 'POST'])
def responder():
    return render_template("reclamo_depto.html")

if __name__ == "__main__":
    app.run(debug=True)