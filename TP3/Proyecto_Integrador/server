#flask
from flask import Flask, render_template, request, redirect, url_for, abort, flash, session
from flask_login import login_user, login_required, current_user, logout_user
from werkzeug.security import generate_password_hash, check_password_hash

#clases
from modulos.gestores import Gestor_de_base_de_datos, Gestor_de_reclamos
from modulos.usuario import Usuario
from modulos.reclamo import Reclamo
from modulos.reclamos_similares import reclamos_similares

#clases modelo (tablas de db)
from modulos.databases import *

#otros módulos
import datetime
from functools import wraps
from modulos.config import app, db, login_manager

#excepciones
from sqlalchemy.orm.exc import NoResultFound 

GestorDB=Gestor_de_base_de_datos()
#GestorR=Gestor_de_reclamos('modulos/ClasificadorSk/clasificadorsk/objeto_clasificador.pkl') #error can't get atribute 'Clasificador' on module __main__ from server

admin_list = [1]

with app.app_context():
    db.create_all()

@login_manager.user_loader
def user_loader(user_id):
    return Persona_db.query.get(user_id)
    
@app.route("/", methods=['GET', 'POST'])
def raiz():  
    condicion=""
    if request.method == 'POST':
        u=request.form["usuario"]
        c=request.form["contraseña"] 
        if not u or not c:
            condicion="Complete ambos campos"
        else:
            try:
                actual_password=GestorDB.get_dato_user(u, "password") #contraseña correcta del usuario
            # except Exception as e: #either el usuario no existe o el dato es inválido (el dato es válido, está chequeado)
            #     condicion=str(e)
            except:
                condicion="El usuario no existe"
            else: #bloque que se ejecuta si en try no hubo excepción
                if actual_password==c: #compara la contraseña correcta con la ingresada
                    type=GestorDB.get_dato_user(u, "depto") 
                    if not type: #es decir, type=None
                        return redirect(url_for('usuario', user=u)) 
                    else:
                        return redirect(url_for('jefe', depto=type))
                else:
                    condicion="La contraseña es incorrecta"

    return render_template("main.html", condicion=condicion)

@app.route("/sing_up", methods=['GET', 'POST'])
def new_user():
    condicion=""
    if request.method == 'POST':
        name=request.form["name"]
        apellido=request.form["surname"]
        mail=request.form["email"]
        user_name=request.form["username"]
        cloister=request.form["cloister"]
        contraseña=request.form["password"]
        rep_contraseña=request.form["password_again"]

        if not name or not apellido or not mail or not user_name or not cloister or not contraseña or not rep_contraseña:
            condicion="Faltan ingresar datos. Por favor complete todos los campos"

        elif GestorDB.chequear_disponibilidad("email", mail)=="Email/usuario ocupado":
            condicion="Ya existe una cuenta con ese email"

        elif GestorDB.chequear_disponibilidad("username", user_name)=="Email/usuario ocupado":
            condicion="Ya existe una cuenta con ese nombre de usuario"

        elif contraseña!=rep_contraseña:
            condicion="Las contraseñas ingresadas no coinciden"

        else:
            #ID_inicializador=0 #no se guarda, la base de datos le asigna uno al guardar el usuario
            #user=Usuario(ID_inicializador, name, apellido, user_name, mail, contraseña, cloister)
            #estructura de desglose del método= name, surname, username, email, password +claustro/depto
            datos_user=[name, apellido, mail, user_name, contraseña, cloister, "", ""]
            GestorDB.guardar_nuevo_objeto("usuario", datos_user)
            return redirect(url_for('raiz'))
            #¿deberíamos mostrar un mensaje de registro o direccionar a usuario directamente?
    
    return render_template("sing_up.html", condicion=condicion)

@app.route("/jefe/<depto>", methods=['GET', 'POST'])
def jefe(depto):
    depto=depto.capitalize()
    if request.method == 'POST':
        direction=request.form["button_value"] #it's either "Manejar reclamos" o "Analítica"
        print(direction)
        if direction=="Manejar reclamos":
            return redirect(url_for('manejar', depto=depto))
        elif direction=="Analítica":
            return redirect(url_for('analitica', depto=depto))
        
    return render_template("jefe.html", depto=depto)

@app.route("/manejar/<depto>", methods=['GET', 'POST'])
def manejar(depto):

    if request.method == 'POST':
        ID=request.form["ID"]
        nuevo_depto=request.form["nuevo_depto"]
        nuevo_estado=request.form["nuevo_estado"]
        GestorDB.modificar_dato("depto", nuevo_depto, "reclamo", ID)
        GestorDB.modificar_dato("estado", nuevo_estado, "reclamo", ID)

    reclamos_de_depto_data=GestorDB.get_reclamo_by_filtro(depto) #se obtienen los datos de los reclamos del depto de bd
    reclamos=GestorR.cargar_de_db(reclamos_de_depto_data) #lista de objetos Reclamo
    # así como está abajo funciona, pero los reclamos tienen que manipularse desde GestorR (que no anda jaja)
    # reclamos=[] #lista de objetos Reclamo
    # for datos in reclamos_de_depto_data: #datos=[ID_reclamo, description, timestap, ID_user, estado, depto, imagen]
    #     claim=Reclamo(datos[0], datos[1], datos[2], datos[3])
    #     claim.set_depto(datos[5])
    #     claim.cambiar_estado(datos[4])
    #     claim.cargar_imagen(datos[6])
    #     reclamos.append(claim)
    length=len(reclamos)

    return render_template("reclamo_depto.html", depto=depto, reclamos=reclamos, len=length)

@app.route("/analitica/<depto>", methods=['GET', 'POST'])
def analitica(depto):
    return render_template("analitica.html", depto=depto)

@app.route("/usuario/<user>", methods=['GET', 'POST'])
def usuario(user):
    session['username'] = user
    return render_template("usuario.html", user=user)

@app.route("/reclamo", methods=['GET', 'POST'])
def crear():
    user=session.get('username')
    if request.method == "POST":
        #creación del objeto Usuario
        usser=Usuario(GestorDB.get_dato_user(user, "ID"), GestorDB.get_dato_user(user, "name"), GestorDB.get_dato_user(user, "surname"), user, GestorDB.get_dato_user(user, "email"), GestorDB.get_dato_user(user, "password"), GestorDB.get_dato_user(user, "claustro"))
        #creación del formulario para el reclamo
        texto=request.form["description"]
        formulario=usser.generar_datos_reclamo(texto)
        #imagen
        imagen=request.files["image"]
        if imagen: #es decir, imagen no es None
            imagen_data = imagen.read()
            formulario.append(imagen_data)
        #se añade un ID provisorio para poder crear el reclamo
        formulario.insert(0, 1)
        #se crea el reclamo
        reclamo=GestorR.crear_reclamo(formulario) # no sé si debería andar el reclamo por fuera del gestor
        #se clasifica
        GestorR.clasificar_reclamo(reclamo) 
        posibles=GestorDB.get_reclamos_by_filtro("departamento", reclamo.get_departamento()) #obtiene los datos de los reclamos con el mismo departamento que el reclamo objetivo
        posibles_data=[] #guarda tuplas con la descripción de los reclamos y su ID
        for x in range(len(posibles)): 
            posibles_data.append((posibles[x][1], posibles[x][0])) #se queda con la descripción y el ID
        similares=reclamos_similares(posibles_data, texto) #lista con los ID de los reclamos similares
        if len(similares)==0:
            #se guarda el reclamo original en la base de datos
            data=[reclamo.get_descripcion(), reclamo.get_estado(), reclamo.get_departamento(), reclamo.get_fecha(), reclamo.get_adherentes(), reclamo.get_ID_usuario()]
            GestorDB.guardar_nuevo_objeto(data)
            return render_template("reclamo.html", reclamos_similares="no hay reclamos similares")
        else:
            lista_similares=[]
            for i in range(len(similares)):
                reclamo_data=GestorDB.get_reclamo_by_filtro("ID", similares[i]) #seguro existen los reclamos con ese ID porque vienen de una consulta a la bd
                reclamo=GestorR.cargar_de_db(reclamo_data)
                lista_similares.append(reclamo)
            return render_template("reclamo.html", reclamos_similares=lista_similares)
        try:
            id=request.form["ID_reclamo"]
            #añadir adherente al reclamo correspondiente a ese id
        except:
            pass
    else:
        return render_template("reclamo.html", reclamos_similares="todavia no buscados")

@app.route("/reclamos_pendientes", methods=['GET', 'POST'])
def pendientes():
    #GestorDB.modificar_dato("adherentes", "", "reclamo", 1) :lo arrancaba en cero adherentes para probar

    reclamos_pendientes=[]
    user=session.get('username')
    ID_user=str(GestorDB.get_dato_user(user, "ID"))

    if request.method== 'POST':
        try:
            ID_reclamo=request.form["ID_reclamo"]
            ID_reclamo=int(ID_reclamo)
            adherentes_actuales=GestorDB.get_reclamos_by_filtro("ID", ID_reclamo)
            adherentes_actuales=adherentes_actuales[7]
            if adherentes_actuales=="":
                adherentes_actualizados=ID_user
            else:
                adherentes_actualizados=adherentes_actuales+" "+ID_user
            GestorDB.modificar_dato("adherentes", adherentes_actualizados, "reclamo", ID_reclamo)
        except:
            pass
        # name=GestorDB.__get_username_by_ID(int(ID_user))
        # print(name)
        # print(GestorDB.get_dato_user(name,"reclamos_adheridos"))
        # adheridos_actualizados=adheridos_actuales+" "+str(ID)
        # GestorDB.modificar_dato("reclamos_adheridos", reclamos_actualizados, "usuario", int(ID_user))

    reclamos_pendientes_data = GestorDB.get_reclamos_by_filtro("estado", "pendiente")
    # print(reclamos_pendientes_data)
    cant=len(reclamos_pendientes_data)
    # print(cant)

    filtro="todos"
    if request.method== 'POST':
        try:
            filtro=request.form["filtro"]
        except:
            pass
    if cant!=0:
        #reclamos_pendientes=GestorR.cargar_de_db(reclamos_pendientes_data)
        datos=reclamos_pendientes_data
        # print(datos)
        reclamos_pendientes=[]
        for i in range(len(datos)):
            if filtro==datos[i][5]:
                claim=Reclamo(datos[i][0], datos[i][1], datos[i][2], datos[i][3])
                claim.set_depto(datos[i][5])
                claim.cambiar_estado(datos[i][4])
                if datos[i][7]!="":
                    for adherente in datos[i][7].split(" "): #datos[0][7].split(" ")=lista de strings
                        claim.sumar_adherente(int(adherente)) #lista de enteros 
                    reclamos_pendientes.append(claim)
                else:
                    reclamos_pendientes.append(claim)
            elif filtro=="todos":
                claim=Reclamo(datos[i][0], datos[i][1], datos[i][2], datos[i][3])
                claim.set_depto(datos[i][5])
                claim.cambiar_estado(datos[i][4])
                if datos[i][7]!="":
                    for adherente in datos[i][7].split(" "): #datos[0][7].split(" ")=lista de strings
                        claim.sumar_adherente(int(adherente)) #lista de enteros 
                    reclamos_pendientes.append(claim)
                else:
                    reclamos_pendientes.append(claim)

    ID_user=int(ID_user) 
    return render_template("reclamos_pendientes.html", reclamos_pendientes=reclamos_pendientes, cant=cant, user=user, ID_user=ID_user)

@app.route("/reclamos_usuario", methods=['GET', 'POST'])
def reclamos_user():
    user=session.get('username')
    reclamos=[]
    cant=0
    #ya no viene ningún post desde /usuario
    # if request.method == 'POST': #post que viene desde /usuario, ¿qué pasa con el que redirecciona desde /reclamos_usuario?
    #     user=request.form["username"]
    #     ID_user=GestorDB.get_dato_user(user, "ID") #no va a lanzar excepción porque user existe y ID es un atributo 
    #     reclamos_data=GestorDB.get_reclamos_by_filtro("usuario", ID_user) 
    #     cant=len(reclamos_data)
    #     if cant!=0:
    #         reclamos=GestorR.cargar_de_db(reclamos_data)
    return render_template("reclamos_usuario.html",  reclamos=reclamos, user=user, cant=cant)

if __name__ == "__main__":
    app.run(debug=True)